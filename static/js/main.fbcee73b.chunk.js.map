{"version":3,"sources":["components/Today.js","components/DateRange.js","components/DataChart.js","components/DataResults.js","App.js","serviceWorker.js","index.js"],"names":["Today","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dolarToday","dateToday","axios","get","response","data","Dolares","setState","Valor","Fecha","console","log","_context","t0","react_default","a","createElement","className","React","Component","DateRange","startDate","Date","endDate","handleChangeStart","bind","assertThisInitialized","handleChangeEnd","selectedDates","date","onSelectDate","es","dateFormat","selected","selectsStart","onChange","selectsEnd","minDate","type","onClick","value","DataChart","dataWithNumbers","map","parseFloat","replace","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","minTickGap","domain","stroke","activeDot","r","DataResults","selectedRangeArray","dates","startYear","slice","startMonth","startDay","endYear","endMonth","endDay","concat","nextProps","creatingEndpoint","url","dolarDataArray","dolarValues","minDolar","reduce","min","v","maxDolar","max","dolarNumbers","averageDolar","sum","length","toFixed","components_DataChart","App","handleDateChange","options","year","month","day","toLocaleDateString","components_Today","components_DateRange","components_DataResults","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbcee73b.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass Today extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dolarToday: \"\",\n      dateToday: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let response = await axios.get('https://api.sbif.cl/api-sbifv3/recursos_api/dolar?apikey=9c84db4d447c80c74961a72245371245cb7ac15f&formato=json');\n      response = response.data.Dolares[0];\n      this.setState({\n        dolarToday: response.Valor,\n        dateToday: response.Fecha\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"today-container\">\n        <h1>Dolar-App</h1>\n        <h4>El valor del dólar para hoy {this.state.dateToday} es:</h4>\n        <h4>{this.state.dolarToday}</h4>\n      </div>\n    );\n  }\n}\n\nexport default Today;","import React from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass DateRange extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: new Date(),\n      endDate: new Date()\n    };\n    this.handleChangeStart = this.handleChangeStart.bind(this);\n    this.handleChangeEnd = this.handleChangeEnd.bind(this);\n    this.selectedDates = this.selectedDates.bind(this);\n  }\n\n  handleChangeStart(date) {\n    this.setState({\n      startDate: date\n    });\n  }\n\n  handleChangeEnd(date) {\n    this.setState({\n      endDate: date\n    });\n  }\n\n  selectedDates() {\n    this.props.onSelectDate(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"date-range-container\">\n        <h4>Búsqueda por rango de fechas:</h4>\n        <DatePicker\n          dateFormat=\"yyyy/MM/dd\"\n          selected={this.state.startDate}\n          selectsStart\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n          onChange={this.handleChangeStart}\n        />\n        <DatePicker\n          dateFormat=\"yyyy/MM/dd\"\n          selected={this.state.endDate}\n          selectsEnd\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n          onChange={this.handleChangeEnd}\n          minDate={this.state.startDate}\n        />\n        <input type=\"button\" onClick={this.selectedDates} value=\"Consultar\"/>\n      </div>\n    );\n  }\n}\n\nexport default DateRange;","import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\n\nclass DataChart extends React.Component {\n  render() {\n    let data = this.props.data;\n\n    let dataWithNumbers = data.map(value => {\n      return {\n        Fecha: value.Fecha,\n        Valor: parseFloat(value.Valor.replace(/,/, '.'))\n      };\n    });\n\n    return (\n      <div className=\"chart-container\">\n        <LineChart width={600} height={300} data={dataWithNumbers} margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n          <CartesianGrid strokeDasharray=\"3 3\"/>\n          <XAxis dataKey=\"Fecha\"/>\n          <YAxis minTickGap={0} domain={['dataMin - 50', 'dataMax + 50']}/>\n          <Tooltip/>\n          <Line type=\"monotone\" dataKey=\"Valor\" stroke=\"#82ca9d\" activeDot={{r:8}} />\n        </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default DataChart;","import React from 'react';\nimport axios from 'axios';\nimport DataChart from './DataChart';\n\nclass DataResults extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedRangeArray: [],\n    };\n  }\n\n  creatingEndpoint(dates) {\n    const startYear = dates.startDate.slice(0,4);\n    const startMonth = dates.startDate.slice(5,7);\n    const startDay = dates.startDate.slice(8);\n    const endYear = dates.endDate.slice(0,4);\n    const endMonth = dates.endDate.slice(5,7);\n    const endDay = dates.endDate.slice(8);\n    const url = `https://api.sbif.cl/api-sbifv3/recursos_api/dolar/periodo/${startYear}/${startMonth}/dias_i/${startDay}/${endYear}/${endMonth}/dias_f/${endDay}?apikey=9c84db4d447c80c74961a72245371245cb7ac15f&formato=json`;\n    return url;\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    try {\n      const dates = nextProps.dates;\n      let url = await this.creatingEndpoint(dates);\n      let response = await axios.get(url);\n      response = response.data.Dolares;\n      if (response !== this.state.selectedRangeArray) {\n        this.setState({\n          selectedRangeArray: response\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    let dolarDataArray = this.state.selectedRangeArray;\n    let dolarValues = dolarDataArray.map(data => data.Valor);\n    let minDolar = dolarValues.reduce((min, v) => v < min ? v : min, dolarValues[0]);\n    let maxDolar = dolarValues.reduce((max, v) => v > max ? v : max, dolarValues[0]);\n    \n    let dolarNumbers = dolarValues.map(value => parseFloat(value.replace(/,/, '.')));\n    let sumDolar = dolarNumbers.reduce((sum, v) => sum + v, 0);\n    let averageDolar = sumDolar / dolarNumbers.length;\n\n    return (\n      <div className=\"data-results-container\">\n        <h5>Valor promedio para el período: USD$ {averageDolar.toFixed(2)}</h5>\n        <h5>Valor máximo alcanzado: USD$ {maxDolar}</h5>\n        <h5>Valor mínimo alcanzado: USD$ {minDolar}</h5>\n        <DataChart data={dolarDataArray}/>\n      </div>\n    );\n  }\n}\n\nexport default DataResults;","import React from 'react';\nimport Today from './components/Today';\nimport DateRange from './components/DateRange';\nimport DataResults from './components/DataResults';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: new Date(),\n      endDate: new Date()\n    };\n\n    this.handleDateChange = this.handleDateChange.bind(this);\n  }\n\n  handleDateChange(data) {\n    const options = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    };\n    const startDate = data.startDate.toLocaleDateString(\"sq-SE\", options);\n    const endDate = data.endDate.toLocaleDateString(\"sq-AL\", options);\n    this.setState({\n      startDate: startDate,\n      endDate: endDate\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Today />\n        <DateRange onSelectDate={this.handleDateChange} />\n        <DataResults dates={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}